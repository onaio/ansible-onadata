---
# Onadata General
onadata_django_secret_key: "somesecret"
onadata_version: "v4.1.0"
onadata_domain: "example.com"
onadata_email_admins:
  - name: "Ona Data"
    email: "admin@example.com" # TODO: update this
onadata_support_email: "support@example.com"
onadata_static_path: "{{ onadata_checkout_path }}/onadata/static/"
onadata_codebase_path: "{{ onadata_system_user_home }}/app"
onadata_versioned_path: "{{ onadata_codebase_path }}-versioned"
onadata_checkout_path: "{{ onadata_versioned_path }}/{{ onadata_version }}"
onadata_system_user_home: "/home/{{ onadata_system_user }}"
onadata_media_path: "{{ cifs_mount_path }}/{{ samba_onadata_share }}"
onadata_system_user: "onadata"
onadata_wsgi_bind_port: 9000
onadata_service_name: "{{ onadata_system_user }}"
onadata_pid_socks_dir: "/var/run/{{ onadata_service_name }}"
onadata_pid_file: "{{ onadata_pid_socks_dir }}/{{ onadata_service_name }}.pid"

# Onadata celery
nginx_server_name: "example.com"
# How long (in seconds or timedelta) a celery task should be considered valid
# see http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-result_expires
onadata_celery_task_result_expires: 3600

# The schedule for the Celery Beat task that marks export tasks as expired
onadata_celery_beat_mark_exports_expired_schedule: "crontab(hour='*', minute='0')"

# The schedule for the Celery Beat task that deletes export tasks that have been marked as expired
onadata_celery_beat_delete_expired_exports_schedule: "crontab(hour='*', minute='10')"

# The schedule for running the celery.backend_cleanup task (responsible for cleaning expired task results)
# see http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-result_expires
onadata_celery_backend_cleanup_schedule: "crontab(hour='*', minute='30')"
onadata_celery_task_route:
  messaging:
    - "onadata.apps.messaging.tasks.call_backend_async"
  delete_xforms:
    - "onadata.apps.api.tasks.delete_xform_async"
  csv_imports:
    - "onadata.libs.utils.csv_import.submit_csv_async"
  publish_xlsform:
    - "onadata.apps.api.tasks.publish_xlsform_async"
  xlsx_exports:
    - "onadata.apps.viewer.tasks.create_xlsx_export"
  csv_exports:
    - "onadata.apps.viewer.tasks.create_csv_export"
  kml_exports:
    - "onadata.apps.viewer.tasks.create_kml_export"
  osm_exports:
    - "onadata.apps.viewer.tasks.create_osm_export"
  zip_exports:
    - "onadata.apps.viewer.tasks.create_zip_export"
    - "onadata.apps.viewer.tasks.create_csv_zip_export"
  sav_zip_exports:
    - "onadata.apps.viewer.tasks.create_sav_zip_export"
  external_exports:
    - "onadata.apps.viewer.tasks.create_external_export"
  google_export:
    - "google_export.tasks.call_google_sheet_service"
    - "google_export.tasks.sync_update_google_sheets"
    - "google_export.tasks.sync_delete_google_sheets"
    - "onadata.apps.viewer.tasks.create_google_sheet_export"

# Onadata PostgreSQL
onadata_pgsql_host: "127.0.0.1"
onadata_pgsql_port: 6432
onadata_pgsql_db: "{{ postgresql_onadata_db }}"
onadata_pgsql_user: "{{ postgresql_onadata_user }}"
onadata_pgsql_password: "{{ postgresql_onadata_password }}"

# PgBouncer
pgsql_db: "{{ onadata_pgsql_db }}"
pgsql_user: "{{ onadata_pgsql_user }}"
pgsql_password: "{{ onadata_pgsql_password }}"
pgsql_host: "{{ example_postgresql_host }}"
default_pool_size: 50
pgbouncer_server_tls_ca_content: "{{ lookup('file', 'ssl/postgresql/root.crt') }}"
pgbouncer_version: "1.*"

# Onadata RabbitMQ
onadata_rabbitmq_user: "{{ rabbitmq_admin_user }}"
onadata_rabbitmq_password: "{{ rabbitmq_admin_password }}"
onadata_rabbitmq_host: "{{ example_ancillary_host }}"
onadata_rabbitmq_port: "{{ rabbitmq_port }}"

# Onadata SMTP
onadata_smtp_host:
onadata_smtp_port:
onadata_smtp_login:
onadata_smtp_password:
onadata_smtp_use_tls: "True"
onadata_smtp_from: "noreply@example.com"

# Onadata Memcached
onadata_memcached_uri: "{{ example_ancillary_host }}:11211"

# Media Mount Point
cifs_mount_share: "//{{ example_samba_ssh_host }}"
cifs_mount_user: "{{ samba_onadata_user }}"
cifs_mount_password: "{{ samba_onadata_password }}"
cifs_mount_options: "uid=onadata,gid=onadata,username={{ cifs_mount_user }},password={{ cifs_mount_password }}"
cifs_mount_path: "/home/onadata"
cifs_mounts:
  - "{{ samba_onadata_share }}"

# NGINX
nginx_install_method: "package"
ubuntu_release: "jammy"
nginx_site_names:
  - "{{ onadata_domain }}"
nginx_http_site_name: "{{ onadata_domain }}-http"
nginx_https_site_name: "{{ onadata_domain }}-https"
nginx_enabled_sites:
  - "{{ nginx_http_site_name }}"
  - "{{ nginx_https_site_name }}"
nginx_ssl_cert: "fullchain.pem"
nginx_ssl_key: "key.pem"
nginx_ssl_src_dir: "files/ssl/{{ onadata_domain }}"
nginx_ssl_dir: "{{ nginx_dir }}/ssl/{{ onadata_domain }}"
nginx_proxy_read_timeout: "300s"
nginx_client_max_body_size: "100M"
nginx_sites:
  - server:
      name: "{{ nginx_http_site_name }}"
      __listen: "80;\n  listen [::]:80;\n"
      server_name: "{{ nginx_site_names|join(' ') }}"
      return: "301 https://$server_name$request_uri"
      ssl:
        enabled: false
  - server:
      name: "{{ nginx_https_site_name }}"
      __listen: "443;\n  listen [::]:443;\n"
      server_name: "{{ nginx_site_names|join(' ') }}"
      client_max_body_size: "{{ nginx_client_max_body_size }}"
      ssl:
        enabled: true
        cert: "{{ nginx_ssl_cert }}"
        key: "{{ nginx_ssl_key }}"
        src_dir: "{{ nginx_ssl_src_dir }}"
        conf: "{{ onadata_domain }}-ssl.conf"
        remote_src: false
        access_log_format: "timed_combined"
      location1:
        name: "/static"
        alias: "{{ onadata_static_path }}"
      location2:
        name: "/"
        proxy_pass: "http://{{ nginx_onadata_loadbalancer_name }}"
        proxy_read_timeout: "{{ nginx_proxy_read_timeout }}"
        proxy_redirect: "off"
        proxy_set_header:
          - Host $host
          - X-Real-IP $remote_addr
          - X-Forwarded-For $proxy_add_x_forwarded_for
          - X-Forwarded-Host $server_name
          - X-Forwarded-Proto https
        proxy_next_upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
nginx_access_logs:
  - name: "timed_combined"
    format: '''$http_x_forwarded_for - $remote_user [$time_local]  "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time $upstream_response_time $gzip_ratio $request_length'''
    options: null
    filename: "access.log"
nginx_onadata_loadbalancer_name: onadata
nginx_loadbalancers:
  - upstream_name: "{{ nginx_onadata_loadbalancer_name }}"
    method: least_conn
    hosts:
      - "{{ example_api_host_0 }}:{{ onadata_wsgi_bind_port }}"
      - "{{ example_api_host_1 }}:{{ onadata_wsgi_bind_port }}"
nginx_default_enable: false

# Monit
monit_scripts:
  - email
  - email_smtp
  - monit
  - nginx
  - openssh-server
  - rsyslog
  - system
  - uwsgi
service_name: "{{ onadata_service_name }}"
pid_file: "{{ onadata_pid_file }}"
uwsgi_total_memory_limit: "3072"

# Logstash
install_logstash: false
logstash_major_ver: "7.x"
logstash_minor_ver: "1:7.*"
logstash_gelf_server: 127.0.0.1
logstash_gelf_port: 12210
clear_logstash_config: true
logstash_system_groups: ["adm"]
config_logstash: true
logstash_plugins:
  - name: logstash-output-gelf
    state: present
logstash_custom_outputs:
  - output: "gelf"
    lines:
      - 'host => "{{ logstash_gelf_server }}"'
      - 'port => "{{ logstash_gelf_port }}"'
      - 'sender => "{{ onadata_domain }}"'
logstash_custom_inputs:
  - input: "file"
    lines:
      - 'path => ["/var/log/nginx/{{ onadata_domain }}-https-ssl-access.log"]'
      - 'start_position => "end"'
      - "add_field => {"
      - "  ssl => true"
      - "  nginx_access => true"
      - "  from_nginx => true"
      - '  from_host => "%{host}"'
      - '  from_domain => "{{ onadata_domain }}"'
      - "  from_onadata => true"
      - '  git_version => "{{ onadata_version }}"'
      - "}"
